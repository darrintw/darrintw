{
	"ARD_TYPE_CHAR": "Arduino Types - Character C type char",
	"ARD_TYPE_TEXT": "Arduino Types - Text C type String",
	"ARD_TYPE_BOOL": "Arduino Types - Boolean type",
	"ARD_TYPE_SHORT": "Arduino Types - Short number C type char",
	"ARD_TYPE_NUMBER": "Arduino Types - Number C type integer",
	"ARD_TYPE_LONG": "Arduino Types - Large number C type long integer",
	"ARD_TYPE_DECIMAL": "Arduino Types - Decimal number C type floating point",
	"ARD_TYPE_ARRAY": "Arduino Types - Array",
	"ARD_TYPE_NULL": "Arduino Types - Null C type void",
	"ARD_TYPE_UNDEF": "Arduino Types - Undefined type",
	"ARD_TYPE_CHILDBLOCKMISSING": "Arduino Types - Place holder value, indicates block with type not connected",
	"ARD_DEFINE": "Arduino high Blockly.Msg.ARD_HIGH = 'HIGH'; Arduino low Blockly.Msg.ARD_LOW = 'LOW'; Arduino analog Blockly.Msg.ARD_ANALOGREAD = 'read analog pin#'; Arduino Blockly.Msg.ARD_ANALOGREAD_TIP = 'Return value between 0 and 1024'; Arduino Blockly.Msg.ARD_ANALOGWRITE = 'set analog pin#'; Arduino Blockly.Msg.ARD_ANALOGWRITE_TIP = 'Write analog value between 0 and 255 to a specific PWM Port'; Arduino Blockly.Msg.ARD_HIGHLOW_TIP = 'Set a pin state logic High or Low.'; Arduino Arduino Arduino Arduino Arduino Arduino Blockly.Msg.ARD_BUILTIN_LED = 'set built-in LED'; Arduino Blockly.Msg.ARD_BUILTIN_LED_TIP = 'Light on or off for the built-in LED of the Arduino'; Arduino",
	"ARD_TONE_PIN": "Arduino",
	"ARD_TONE_FREQ": "Arduino",
	"ARD_TONE_PIN_TIP": "Arduino",
	"ARD_NOTONE_PIN": "Arduino",
	"ARD_NOTONE_PIN_TIP": "Arduino",
	"ARD_MAP": "Arduino",
	"ARD_MAP_VAL": "Arduino",
	"ARD_MAP_TIP": "Arduino",
	"ARD_FUN_RUN_SETUP": "Arduino",
	"ARD_FUN_RUN_LOOP": "Arduino",
	"ARD_FUN_RUN_TIP": "Arduino",
	"ARD_PIN_WARN1": "Arduino",
	"ARD_COMPONENT_WARN1": "Arduino Blockly.Msg.ARD_SERIAL_SETUP = 'Setup'; Arduino Blockly.Msg.ARD_SERIAL_SPEED = ':  speed to'; Arduino Blockly.Msg.ARD_SERIAL_BPS = 'bps'; Arduino Blockly.Msg.ARD_SERIAL_SETUP_TIP = 'Selects the speed for a specific Serial peripheral'; Arduino Blockly.Msg.ARD_SERIAL_PRINT = 'print'; Arduino Blockly.Msg.ARD_SERIAL_PRINT_NEWLINE = 'add new line'; Arduino Blockly.Msg.ARD_SERIAL_PRINT_TIP = 'Prints data to the console/serial port as human-readable ASCII text.'; Arduino Blockly.Msg.ARD_SERIAL_PRINT_WARN = 'A setup block for %1 must be added to the workspace to use this block!'; Arduino Blockly.Msg.ARD_SERVO_WRITE = 'set SERVO from Pin'; Arduino Blockly.Msg.ARD_SERVO_WRITE_TO = 'to'; Arduino Blockly.Msg.ARD_SERVO_WRITE_DEG_180 = 'Degrees (0~180)'; Arduino Blockly.Msg.ARD_SERVO_WRITE_TIP = 'Set a Servo to an specified angle'; Arduino Blockly.Msg.ARD_SERVO_READ = 'read SERVO from PIN#'; Arduino Blockly.Msg.ARD_SERVO_READ_TIP = 'Read a Servo angle'; Arduino Blockly.Msg.ARD_SPI_SETUP = 'Setup'; Arduino Blockly.Msg.ARD_SPI_SETUP_CONF = 'configuration:'; Arduino Blockly.Msg.ARD_SPI_SETUP_SHIFT = 'data shift'; Arduino Blockly.Msg.ARD_SPI_SETUP_MSBFIRST = 'MSBFIRST'; Arduino Blockly.Msg.ARD_SPI_SETUP_LSBFIRST = 'LSBFIRST'; Arduino Blockly.Msg.ARD_SPI_SETUP_DIVIDE = 'clock divide'; Arduino Blockly.Msg.ARD_SPI_SETUP_MODE = 'SPI mode (idle - edge)'; Arduino Blockly.Msg.ARD_SPI_SETUP_MODE0 = '0 (Low - Falling)'; Arduino Blockly.Msg.ARD_SPI_SETUP_MODE1 = '1 (Low - Rising)'; Arduino Blockly.Msg.ARD_SPI_SETUP_MODE2 = '2 (High - Falling)'; Arduino Blockly.Msg.ARD_SPI_SETUP_MODE3 = '3 (High - Rising)'; Arduino Blockly.Msg.ARD_SPI_SETUP_TIP = 'Configures the SPI peripheral.'; Arduino Blockly.Msg.ARD_SPI_TRANS_NONE = 'none'; Arduino Blockly.Msg.ARD_SPI_TRANS_VAL = 'transfer'; Arduino Blockly.Msg.ARD_SPI_TRANS_SLAVE = 'to slave pin'; Arduino Blockly.Msg.ARD_SPI_TRANS_TIP = 'Send a SPI message to an specified slave device.'; Arduino Blockly.Msg.ARD_SPI_TRANS_WARN1 = 'A setup block for %1 must be added to the workspace to use this block!'; Arduino Blockly.Msg.ARD_SPI_TRANS_WARN2 = 'Old pin value %1 is no longer available.'; Arduino Blockly.Msg.ARD_SPI_TRANSRETURN_TIP = 'Send a SPI message to an specified slave device and get data back.'; Arduino Blockly.Msg.ARD_STEPPER_SETUP = 'Setup stepper motor'; Arduino Blockly.Msg.ARD_STEPPER_MOTOR = 'stepper motor:'; Arduino Blockly.Msg.ARD_STEPPER_DEFAULT_NAME = 'MyStepper'; Arduino Blockly.Msg.ARD_STEPPER_NUMBER_OF_PINS = 'Number of pins'; Arduino Blockly.Msg.ARD_STEPPER_TWO_PINS = '2'; Arduino Blockly.Msg.ARD_STEPPER_FOUR_PINS = '4'; Arduino Blockly.Msg.ARD_STEPPER_PIN1 = 'pin1#'; Arduino Blockly.Msg.ARD_STEPPER_PIN2 = 'pin2#'; Arduino Blockly.Msg.ARD_STEPPER_PIN3 = 'pin3#'; Arduino Blockly.Msg.ARD_STEPPER_PIN4 = 'pin4#'; Arduino Blockly.Msg.ARD_STEPPER_REVOLVS = 'how many steps per revolution'; Arduino Blockly.Msg.ARD_STEPPER_SPEED = 'set speed (rpm) to'; Arduino Blockly.Msg.ARD_STEPPER_SETUP_TIP = 'Configures a stepper motor pinout and other settings.'; Arduino Blockly.Msg.ARD_STEPPER_STEP = 'move stepper'; Arduino Blockly.Msg.ARD_STEPPER_STEPS = 'steps'; Arduino Blockly.Msg.ARD_STEPPER_STEP_TIP = 'Turns the stepper motor a specific number of steps.'; Arduino Blockly.Msg.ARD_STEPPER_COMPONENT = 'stepper'; Arduino",
	"ARD_TIME_DELAY": "Arduino",
	"ARD_TIME_MS": "Arduino",
	"ARD_TIME_DELAY_TIP": "Arduino",
	"ARD_TIME_DELAY_MICROS": "Arduino",
	"ARD_TIME_DELAY_MICRO_TIP": "Arduino",
	"ARD_TIME_MILLIS": "Arduino",
	"ARD_TIME_MILLIS_TIP": "Arduino",
	"ARD_TIME_MICROS": "Arduino",
	"ARD_TIME_MICROS_TIP": "Arduino",
	"ARD_TIME_INF": "Arduino",
	"ARD_TIME_INF_TIP": "Arduino",
	"ARD_SETTONE": "Arduino Blockly.Msg.ARD_VAR_AS = 'as'; Arduino Blockly.Msg.ARD_VAR_AS_TIP = 'Sets a value to a specific type'; IO blocks - pulseIn - Block for function pulseIn(), it measure a pulse duration in a given pin. Blockly.Msg.ARD_PULSE_READ = 'measure %1 pulse on pin #%2'; IO blocks - pulseIn - Block similar to ARD_PULSE_READ, but it adds a time-out in microseconds. Blockly.Msg.ARD_PULSE_READ_TIMEOUT = 'measure %1 pulse on pin #%2 (timeout after %3 Î¼s)'; IO blocks - pulseIn - Tooltip for pulseIn() block. Blockly.Msg.ARD_PULSE_TIP = 'Measures the duration of a pulse on the selected pin.'; IO blocks - pulseIn - Tooltip for pulseIn() block when it uses the optional argument for time-out. Blockly.Msg.ARD_PULSETIMEOUT_TIP = 'Measures the duration of a pulse on the selected pin, if it is within the time-out in microseconds.'; Arduino",
	"ARD_TONEFREQ": "Arduino",
	"ARD_TONE_TIP": "Arduino",
	"ARD_TONE_WARNING": "Arduino",
	"ARD_NOTONE": "Arduino",
	"ARD_NOTONE_TIP": "Arduino",
	"NEW_INSTANCE": "Instances - Menu item to indicate that it will create a new instance",
	"RENAME_INSTANCE": "Instances - Menu item to rename an instance name",
	"NEW_INSTANCE_TITLE": "Instances - Menu item to create a new instance name and apply it to that block",
	"RENAME_INSTANCE_TITLE": "Instances - Confirmation message that a number of instances will be renamed to a new name"
}
